AWSTemplateFormatVersion: '2010-09-09'

Description:
  Creates an Ec2 Instance with nodejs and preloaded with the course program files
  The goal is to demonstrate how to create a role in could formation and use it to perform actions on S3

Parameters:
  #  Will retrieve the latest linux AMI
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  KeyName:
    Description: The name of your ssh key pem file to ssh to your instance
    Type: String
    Default: 'wordpress'
    MinLength: 1


Resources:
  Webserver:
    Type: AWS::EC2::Instance
    DependsOn: "BucketPolicy"
    Metadata:
      Comment: S3 Roles Demo Nodejs
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              ruby: [ ]
              wget: [ ]

          # Download the course files from S3
          sources:
            /home/ec2-user/course : "https://iam-roles-demo-s3-ec2-stackfails.s3.amazonaws.com/coursefiles.zip"

#          The following files are used to configure the cfn-init hooks
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                mode: '000400'
                owner: 'root'
                group: 'root'
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}
              mode: '000400'
              owner: 'root'
              group: 'root'

          commands:
            # Install node 16
            00-install-node:
              command: !Sub |
                curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
                yum -y install nodejs

          Services:
            sysvinit:
              cfn-hup:
                enable: 'true'
                ensureRunning: 'true'
                files:
                  - '/etc/cfn/cfn-hup.conf'
      AWS::CloudFormation::Authentication:
        rolebased:
          type: S3
          buckets:
            - "*"
          roleName: !GetAtt InstanceRole.PolicyName

    Properties:
      IamInstanceProfile:
        !Ref InstanceProfile
      # Always use the latest Linux AMI
      ImageId: !Ref LatestAmiId
      AvailabilityZone: us-east-1a
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref ServerSecurityGroup
      Tags:
        - Key: "Name"
          Value: !Sub "stackfails-${AWS::StackName}-demo"
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
            # Get the latest CloudFormation helper scripts
            yum install -y aws-cfn-bootstrap
          
            # Start cfn-init
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Webserver --region ${AWS::Region}
          
            # cfn-init completed so signal success or not
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Webserver --region ${AWS::Region}
  

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ''
      Policies:
        - PolicyName: S3-nodeserver-demo
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*'
                Resource: '*'
                Effect: Allow

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 you should limit the ip address
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Name"
          Value: !Sub "stackfails-${AWS::StackName}-SSHSecurityGroup"
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS connections from specified CIDR ranges
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Name"
          Value: !Sub "stackfails-${AWS::StackName}-ServerSecurityGroup"
